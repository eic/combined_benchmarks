name: Build against eic-shell

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
#  build-gcc:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3
#    - uses: cvmfs-contrib/github-action-cvmfs@v3
#    - uses: eic/run-cvmfs-osg-eic-shell@main
#      with:
#        platform-release: "jug_xl:nightly"
#        run: |
#          # install this repo
#          CC=gcc CXX=g++ cmake -B build -S .
#          cmake --build build -- -j 2 install
#    - uses: actions/upload-artifact@v3
#      with:
#        name: build-gcc-eic-shell
#        path: |
#          .
#          !src/
#          !apt_cache/
#        if-no-files-found: error
#
#  build-clang:
#    runs-on: ubuntu-latest
#    needs:
#    - build-gcc
#    steps:
#    - uses: actions/checkout@v3
#    - uses: cvmfs-contrib/github-action-cvmfs@v3
#    - uses: eic/run-cvmfs-osg-eic-shell@main
#      with:
#        platform-release: "jug_xl:nightly"
#        run: |
#          # install this repo
#          CC=clang CXX=clang++ cmake -B build -S .
#          cmake --build build -- -j 2 install
#    - uses: actions/upload-artifact@v3
#      with:
#        name: build-clang-eic-shell
#        path: |
#          .
#          !src/
#          !apt_cache/
#        if-no-files-found: error

  ddsim:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        particle: [pi, e]
        detector_config: [arches, brycecanyon]
    steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          ddsim --compactFile ${DETECTOR_PATH}/${DETECTOR}_${{ matrix.detector_config }}.xml -G --gun.particle "${{ matrix.particle }}-" --gun.momentumMin "1*GeV" --gun.momentumMax "20*GeV" --gun.distribution "uniform" -N 200 --outputFile sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: actions/upload-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        path: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
        if-no-files-found: error  

#  eicrecon-gcc:
#    runs-on: ubuntu-latest
#    needs:
#    - build-gcc
#    - ddsim
#    strategy:
#      matrix:
#        particle: [pi, e]
#        detector_config: [arches, brycecanyon]
#    steps:
#    - uses: actions/download-artifact@v3
#      with:
#        name: build-gcc-eic-shell
#    - uses: actions/download-artifact@v3
#      with:
#        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
#    - uses: cvmfs-contrib/github-action-cvmfs@v3
#    - uses: eic/run-cvmfs-osg-eic-shell@main
#      with:
#        platform-release: "jug_xl:nightly"
#        setup: /opt/detector/setup.sh
#        run: |
#          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
#          export JANA_PLUGIN_PATH=$PWD/lib/EICrecon/plugins${JANA_PLUGIN_PATH:+:${JANA_PLUGIN_PATH}}
#          chmod a+x bin/*
#          $PWD/bin/eicrecon -Ppodio:output_file=rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root -Pplugins=dump_flags -Pdump_flags:json=${{ matrix.detector_config }}_flags.json
#    - uses: actions/upload-artifact@v3
#      with:
#        name: eicrecon_rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
#        path: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
#        if-no-files-found: error
#    - uses: actions/upload-artifact@v3
#      with:
#        name: ${{ matrix.detector_config }}_flags.json
#        path: ${{ matrix.detector_config }}_flags.json
#        if-no-files-found: error

  run_eicrecon_reco_flags-gcc:
    runs-on: ubuntu-latest
    needs:
    - ddsim
    strategy:
      matrix:
        particle: [pi, e]
        detector_config: [arches, brycecanyon]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        setup: /opt/detector/setup.sh
        run: |
          export DETECTOR_CONFIG=${DETECTOR}_${{ matrix.detector_config }}
          run_eicrecon_reco_flags.py sim_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4hep.root rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }} -Pdump_flags:json=${{ matrix.detector_config }}_right_flags.json
    - uses: actions/upload-artifact@v3
      with:
        name: run_eicrecon_reco_flags_rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.edm4eic.root
        path: rec_${{ matrix.particle }}_1GeV_20GeV_${{ matrix.detector_config }}.tree.edm4eic.root
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.detector_config }}_right_flags.json
        path: ${{ matrix.detector_config }}_right_flags.json
        if-no-files-found: error

#  # This job is to build postprocessing of artifacts from EICrecon runs
#  generate-report:
#    runs-on: ubuntu-latest
#    needs:
#      - run_eicrecon_reco_flags-gcc
#      - eicrecon-gcc
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: arches_flags.json
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: arches_right_flags.json
#
#      - name: Build flags table
#        run: |
#          python3 src/tools/default_flags_table/gen_markdown_tables.py --flags=arches_right_flags.json --template=docs/table_flags/flags.in.md --output=flags.md
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: flags.md
#          path: flags.md
#          if-no-files-found: error
#
#  # build-docs and deploy-docs copy doxygen.yml functionality
#  # the difference is that these jobs use resulting artifacts from EICrecon runs
#  # to embed into docs
#  build-docs-advanced:
#    needs:
#      - generate-report
#    runs-on: ubuntu-latest
#    container:
#      image: alpine:latest
#      volumes:
#        - /home/runner/work/_temp:/home/runner/work/_temp
#      # FIXME hard-coded: see https://github.com/actions/upload-pages-artifact/pull/14
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/download-artifact@v3
#        with:
#          name: flags.md
#      - uses: actions/download-artifact@v3
#        with:
#          name: arches_right_flags.json
#      - run: |
#          apk add doxygen graphviz
#          doxygen Doxyfile
#          cp flags.md docs/table_flags/flags.md
#          cp arches_right_flags.json docs/arches_flags.json
#          cp -r docs publishing_docs
#          mv html publishing_docs/doxygen
#      - uses: actions/upload-artifact@v3
#        with:
#          name: docs
#          path: publishing_docs/
#          if-no-files-found: error
#      - run:
#          apk add tar bash
#        # FIXME bash not really required: see https://github.com/actions/upload-pages-artifact/pull/14
#      - uses: actions/upload-pages-artifact@v1
#        if: github.ref == 'refs/heads/main'
#        with:
#          path: publishing_docs/
#          retention-days: 7
#
#  deploy-docs-advanced:
#    needs: build-docs-advanced
#    if: github.ref == 'refs/heads/main'
#    permissions:
#      pages: write
#      id-token: write
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v1
